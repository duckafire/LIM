#!/usr/bin/env bash


# NOTE - arguments to #2 -
# -r - remove the ./lim-broken/lim IF none error occur during the tests
# -g - IF a error occur, create the ./lim-broken/lim, to debug with gdb
# -c - only compile the ./lim-broken/lim, no execute none test
# -a - auto run tests. Stop after a error ocurr and wait use to continue
# -A - run ALL tests, like if each were called with the flag `-a`. It
#      will stop if a compilation error occur.


declare -r KW=("args" "queue" "header")
declare -r TRY="./run < ${KW[0]} | ${KW[1]} | ${KW[2]} | -A | -r > [ -a | -c | -g ]"
declare -r ADDR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)

if [[ $# -eq 0 ]]; then
	echo -e "None arguments.\n\n$TRY\n"
	exit 0
fi


declare -r ARG_TARGET=$1
declare -i ARG_BROKEN

if [[ $ARG_TARGET = "-r" ]]; then
	if [[ -d "$ADDR/lim-broken" ]]; then
		echo -e "./lim-broken/lim was deleted.\n"
		rm -r "$ADDR/lim-broken"
		exit 0
	fi

	echo -e "./lim-broken/lim don't exist.\n"
	exit 1

elif [[ $ARG_TARGET = "-A" ]]; then

	for cur_kw in "${KW[@]}"; do
		$ADDR/run $cur_kw -a
		[[ $? -ne 0 ]] && exit 1
	done

	exit 0
fi

if [[ $# -ge 2 ]]; then
	case $2 in
		"-a") ARG_BROKEN=3 ;;
		"-c") ARG_BROKEN=2 ;;
		"-g") ARG_BROKEN=1 ;;
		*)    echo -e "The 2th arg. is invalid.\n\n$TRY\n"; exit 0 ;;
	esac
else
	ARG_BROKEN=0
fi

function check_argument(){
	local -r arg="$1"

	for cur_kw in "${KW[@]}"; do
		if [[ $arg = "$cur_kw" ]]; then
			return 1
		fi
	done

	# error
	return 0
}

declare -r TMP="$ADDR/scripts/.tmp"
declare -r BROK="$ADDR/lim-broken"
declare -r MAIN="$TMP/main.c"
declare -r EXE="$TMP/exe"
declare -r LOG="$TMP/log"
declare -r BIN="$ADDR/../src/"


[[ ! -d $TMP ]] && mkdir $TMP
[[ ! -f $MAIN ]] && > $MAIN
[[ ! -f $EXE ]] && > $EXE
[[ ! -f $EXE ]] && > $LOG
[[ ! -f "$TMP/a.lua" ]] && > "$TMP/a.lua"
[[ ! -f "$TMP/b.lua" ]] && > "$TMP/b.lua"
[[ ! -f "$TMP/c.lua" ]] && > "$TMP/b.lim"


function get_main_path(){
	echo "$ADDR/scripts/$1/main.c"
}

function get_args_path(){
	echo "$ADDR/scripts/$1/args"
}

function read_file(){
	local -r file_name="$ADDR/scripts/$1"
	local -r add_include=$2
	local -r only_copy=$3

	local cur_line="" with_path="" full_content=""

	while read cur_line; do

		if [[ $only_copy -eq 1 ]]; then
			with_path=$BIN$cur_line

			[[ $add_include -eq 0 ]] && with_path="-I$with_path"
		else
			with_path=$cur_line
		fi

		if [[ -z $full_content ]]; then
			full_content=$with_path
		else
			full_content="$full_content\n$with_path"
		fi

	done < "$file_name"

	echo -e "$full_content"
}

function debug_exe(){
	# -1; empty argument
	#  0: create after an error occur
	#  1: (from ARG_BROKEN) force the creation

	if [[ $ARG_BROKEN -eq 1 ]] || [[ $1 -eq 0 ]]; then
		[[ ! -d $BROK ]] && mkdir $BROK
		[[ -f $BROK/lim ]] && rm $BROK/lim
		[[ -f $TMP/exe ]] && cp $TMP/exe $BROK/lim
	fi
}


export ARG_TARGET ARG_BROKEN
export ADDR TMP BROK MAIN EXE LOG SRC BIN
export -f read_file get_main_path get_args_path debug_exe


if check_argument $ARG_TARGET; then
	echo -e 'Invalid argument: "'$1'"'"\n\nTry: $TRY\n"
	exit 1
fi

$ADDR/scripts/create-main

declare -ri CREATE_MAIN_STATUS=$?

if [[ $ARG_BROKEN -eq 2 ]]; then
	debug_exe 0
	echo "See $BROK"
	exit 0
fi

[[ $CREATE_MAIN_STATUS -eq 0 ]] && $ADDR/scripts/start-tests


unset -f read_file get_main_path get_args_path debug_exe

exit $CREATE_MAIN_STATUS
