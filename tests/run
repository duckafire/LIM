#!/usr/bin/env bash


# NOTE - arguments to #2 -
# -g - IF a error occur, create the ./lim-broken/lim, to debug with gdb
# -c - only compile the ./lim-broken/lim, no execute none test
# -r - remove the ./lim-broken/lim IF none error occur during the tests


declare -r TRY="./run < args | buf-man | header-lim | tools > [ -g | -c | -r ]"

if [[ $# -eq 0 ]]; then
	echo -e "$TRY\n"
	exit 0
fi


declare -r ARG_TARGET=$1
declare -i ARG_BROKEN

case $2 in
	"-r") ARG_BROKEN=3 ;;
	"-c") ARG_BROKEN=2 ;;
	"-g") ARG_BROKEN=1 ;;
	*)    ARG_BROKEN=0 ;;
esac

function check_argument(){
	[[ $1 != "args" ]] && [[ $1 != "buf-man" ]] && [[ $1 != "header-lim" ]] && [[ $1 != "tools" ]]
	return $?
}


declare -r ADDR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
declare -r TMP="$ADDR/scripts/.tmp"
declare -r BROK="$ADDR/lim-broken"
declare -r MAIN="$TMP/main.c"
declare -r EXE="$TMP/exe"
declare -r LOG="$TMP/log"
declare -r BIN="../src/"

declare _files _includes _main _args _main_c_path

[[ -d $TMP ]] && rm -r $TMP
mkdir $TMP

> $MAIN && > $EXE && > $LOG
> "$TMP/a.lua" && > "$TMP/b.lua" && > "$TMP/b.lim"


function get_main_path(){
	echo "./scripts/$1/main.c"
}

function get_args_path(){
	echo "./scripts/$1/args"
}

function read_file(){
	local -r file_name="./scripts/$1"
	local -r add_include=$2
	local -r only_copy=$3

	local cur_line="" with_path="" full_content=""

	while read cur_line; do

		if [[ $only_copy -eq 1 ]]; then
			with_path=$BIN$cur_line

			[[ $add_include -eq 0 ]] && with_path="-I$with_path"
		else
			with_path=$cur_line
		fi

		if [[ -z $full_content ]]; then
			full_content=$with_path
		else
			full_content="$full_content\n$with_path"
		fi

	done < "$file_name"

	echo -e "$full_content"
}

function rm_tmp_dir(){
	[[ -d $TMP ]] && rm -r $TMP
}

function debug_exe(){
	# 0: create after an error occur
	# 1: force the creation
	# 2: delete them, IF none error occur

	if [[ $ARG_BROKEN -eq 3 ]] && [[ $1 -eq 2 ]]; then
		[[ -d $BROK ]] && rm -r $BROK
		return
	fi

	if [[ $ARG_BROKEN -eq 1 ]] || [[ $1 -eq 0 ]]; then
		[[ ! -d $BROK ]] && mkdir $BROK
		[[ -f $TMP/exe ]] && cp $TMP/exe $BROK/lim
	fi
}


export ARG_TARGET ARG_BROKEN
export ADDR TMP BROK MAIN EXE LOG SRC BIN
export _files _includes _main _args _main_c_path
export -f read_file get_main_path get_args_path rm_tmp_dir debug_exe


if check_argument $ARG_TARGET; then
	echo -e 'Invalid argument: "'$1'"'"\n\nTry: $TRY\n"
	exit 1
fi

$ADDR/scripts/create-main

declare -ri CREATE_MAIN_STATUS=$?

if [[ $ARG_BROKEN -eq 2 ]]; then
	debug_exe 0
	echo "See $BROK"
	exit 0
fi

[[ $CREATE_MAIN_STATUS -eq 0 ]] && $ADDR/scripts/start-tests


unset _files _includes _main _args _main_c_path
unset -f read_file get_main_path get_args_path debug_exe

rm_tmp_dir
exit $CREATE_MAIN_STATUS
