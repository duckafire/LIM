#!/usr/bin/env bash


declare -r RUN_ARG=$1
declare -r TRY="./run < args | buf-man >"

if [[ $# -eq 0 ]]; then
	echo -e "$TRY\n"
	exit 0
fi

[[ $# -gt 1 ]] && echo -e "Arguments superior 1th are ignored.\n"


declare -r ADDR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
declare -r TMP="$ADDR/scripts/.tmp"
declare -r BROK="$ADDR/lim-broken"
declare -r MAIN="$TMP/main.c"
declare -r EXE="$TMP/exe"
declare -r LOG="$TMP/log"
declare -r SRC="$TMP/a.lua"
declare -r BIN="../src/"

declare _files _includes _main _args _main_c_path

[[ -d $TMP ]] && rm -r $TMP
mkdir $TMP

> $MAIN && > $EXE && > $LOG && > $SRC


function get_main_path(){
	echo "./scripts/$1/main.c"
}

function get_args_path(){
	echo "./scripts/$1/args"
}

function read_file(){
	local -r file_name="./scripts/$1"
	local -r add_include=$2
	local -r only_copy=$3

	local cur_line="" with_path="" full_content=""

	while read cur_line; do

		if [[ $only_copy -eq 1 ]]; then
			with_path=$BIN$cur_line

			[[ $add_include -eq 0 ]] && with_path="-I$with_path"
		else
			with_path=$cur_line
		fi

		if [[ -z $full_content ]]; then
			full_content=$with_path
		else
			full_content="$full_content\n$with_path"
		fi

	done < "$file_name"

	echo -e "$full_content"
}

function rm_tmp_dir(){
	[[ -d $TMP ]] && rm -r $TMP
}


export RUN_ARG ADDR TMP BROK MAIN EXE LOG SRC BIN
export _files _includes _main _args _main_c_path
export -f read_file get_main_path get_args_path rm_tmp_dir


if [[ $RUN_ARG != "args" ]] && [[ $RUN_ARG != "buf-man" ]]; then
	echo -e 'Invalid argument: "'$1'"'"\n\nTry: $TRY\n"
	exit 1
fi

$ADDR/scripts/create-main

declare -ri CREATE_MAIN_STATUS=$?
[[ $CREATE_MAIN_STATUS -eq 0 ]] && $ADDR/scripts/start-tests


unset _files _includes _main _args _main_c_path
unset -f read_file get_main_path get_args_path

rm_tmp_dir
exit $CREATE_MAIN_STATUS
