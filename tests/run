#!/usr/bin/env bash

if [[ $# -eq 0 ]]; then
	echo -e "./run < args >\n"
	exit 0
fi

[[ $# -gt 1 ]] && echo -e "Arguments superior 1th are ignored.\n"


declare -r TMP="./scripts/.tmp"
declare -r MAIN="$TMP/main.c"
declare -r EXE="$TMP/exe"
declare -r OUT="$TMP/output"
declare -r SRC="$TMP/a.lua"
declare -r BIN="../src/"

declare _files _includes _main _args _main_c_path

function get_main_path(){
	echo "./scripts/$1/main.c"
}

function get_args_path(){
	echo "./scripts/$1/args"
}

function read_file(){
	local -r file_name="./scripts/$1" add_include=$2 only_copy=$3
	local cur_line with_path full_content=""

	while read cur_line; do

		if [[ $only_copy -eq 1 ]]; then
			with_path=$BIN$cur_line

			[[ $add_include -eq 0 ]] && with_path="-I$with_path"
		else
			with_path=$cur_line
		fi

		if [[ -z $full_content ]]; then
			full_content=$with_path
		else
			full_content="$full_content\n$with_path"
		fi

	done < "$file_name"

	echo -e "$full_content"
}

export TMP MAIN EXE OUT SRC BIN
export _files _includes _main _args _main_c_path
export -f read_file get_main_path get_args_path

[[ ! -d $TMP ]] && mkdir $TMP
> $MAIN && > $EXE && > $OUT && > $SRC

if [[ $1 = "args" ]]; then
	./scripts/args/argss
	exit $?
fi


# else
echo -e 'Invalid argument: "'$1'"'"\n\n./run < args >\n"
rm -r $TMP
